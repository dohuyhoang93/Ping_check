{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ping Check","text":"<p>Ping Check is a simple Rust command-line utility designed to perform ICMP ping checks on a list of IP addresses provided in a text file. The program determines whether each IP address is reachable (\"Alive\") or not (\"Dead\") and outputs the results to the console. This tool is useful for network administrators or users who need to verify the availability of multiple IP addresses in a batch.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Reads a list of IP addresses from a text file, one per line.</li> <li>Performs a single ICMP ping to each IP address.</li> <li>Supports both Windows and Unix-like systems (e.g., Linux, macOS).</li> <li>Outputs the status of each IP address as \"Alive\" (reachable) or \"Dead\" (unreachable).</li> <li>Includes a 1-second delay between pings to prevent overwhelming the system.</li> <li>Licensed under the GNU General Public License version 3 (GPL-3.0), ensuring freedom to use, modify, and distribute the software.</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To build and run Ping Check, you need the following: - Rust: The Rust programming language and Cargo (Rust's package manager). Install Rust from rust-lang.org. - Ping Command: The <code>ping</code> command-line utility, which is typically pre-installed on most operating systems (Windows, Linux, macOS). - A text file containing IP addresses (one per line) to check.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/dohuyhoang93/Ping_check.git\ncd Ping_check\n</code></pre></p> </li> <li> <p>Build the Project:    Use Cargo to compile the Rust code:    <pre><code>cargo build --release\n</code></pre>    The compiled binary will be located in <code>target/release/ping_check</code>.</p> </li> <li> <p>(Optional) Install the Binary:    To make the <code>ping_check</code> binary available system-wide, copy it to a directory in your PATH, such as <code>/usr/local/bin</code> (on Unix-like systems):    <pre><code>sudo cp target/release/ping_check /usr/local/bin/\n</code></pre></p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ol> <li> <p>Prepare an IP Address File:    Create a text file (e.g., <code>ips.txt</code>) with one IP address per line. For example:    <pre><code>8.8.8.8\n1.1.1.1\n192.168.1.1\n</code></pre></p> </li> <li> <p>Run the Program:    Execute the program by providing the path to the IP address file as a command-line argument:    <pre><code>cargo run -- ips.txt\n</code></pre>    Or, if using the compiled binary:    <pre><code>ping_check ips.txt\n</code></pre></p> </li> <li> <p>Output:    The program will ping each IP address and display its status:    <pre><code>IP: 8.8.8.8, Status: Alive\nIP: 1.1.1.1, Status: Alive\nIP: 192.168.1.1, Status: Dead\n</code></pre></p> </li> <li> <p>Error Handling:</p> </li> <li>If the file path is not provided or is incorrect, the program will display a usage message and exit:      <pre><code>Usage: ping_check &lt;file_path&gt;\n</code></pre></li> <li>If the file cannot be opened, an error message will be displayed.</li> </ol>"},{"location":"#code-overview","title":"Code Overview","text":"<p>The program is written in Rust and consists of a single source file, <code>src/main.rs</code>. Key components include: - Command Execution: Uses the <code>std::process::Command</code> module to execute the <code>ping</code> command, with platform-specific arguments (<code>-n 1</code> for Windows, <code>-c 1</code> for Unix-like systems). - File Input: Reads IP addresses from a file using <code>std::fs::File</code> and <code>std::io::BufReader</code>. - Concurrency Control: Implements a 1-second delay between pings using <code>std::thread::sleep</code> to avoid overwhelming the system. - Error Handling: Gracefully handles file I/O errors and invalid command-line arguments.</p> <p>For a detailed explanation of the code, refer to the comments in <code>src/main.rs</code>.</p>"},{"location":"#platform-compatibility","title":"Platform Compatibility","text":"<ul> <li>Windows: Uses <code>ping -n 1 &lt;ip&gt;</code> to send a single ping.</li> <li>Unix-like Systems (Linux, macOS, etc.): Uses <code>ping -c 1 &lt;ip&gt;</code> to send a single ping.</li> <li>The program automatically detects the operating system and adjusts the <code>ping</code> command accordingly.</li> </ul>"},{"location":"#limitations","title":"Limitations","text":"<ul> <li>The program relies on the system\u2019s <code>ping</code> command, which must be available and accessible.</li> <li>It performs only a single ping per IP address, which may not account for intermittent network issues.</li> <li>No advanced configuration options (e.g., timeout settings, multiple pings) are currently supported.</li> <li>Empty lines in the input file are skipped, but invalid IP addresses are not explicitly validated.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! To contribute: 1. Fork the repository. 2. Create a new branch (<code>git checkout -b feature/your-feature</code>). 3. Make your changes and commit (<code>git commit -m \"Add your feature\"</code>). 4. Push to the branch (<code>git push origin feature/your-feature</code>). 5. Open a pull request.</p> <p>Please ensure that your changes comply with the GNU General Public License version 3.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GNU General Public License version 3 (GPL-3.0). See the LICENSE file for details. You are free to use, modify, and distribute this software, provided that any derivative works are also licensed under the GPL-3.0.</p>"},{"location":"#contact","title":"Contact","text":"<p>For questions, suggestions, or issues, please open an issue on the GitHub repository or contact the maintainer at [insert contact information, if available].</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Built with Rust.</li> <li>Licensed under the GNU General Public License version 3.</li> </ul>"},{"location":"Neural%20Network/explain_fully_connect/","title":"D\u01b0\u1edbi \u0111\u00e2y l\u00e0 gi\u1ea3i th\u00edch chi ti\u1ebft cho \u0111o\u1ea1n m\u00e3 \u0111\u00e3 \u0111\u01b0\u1ee3c tinh ch\u1ec9nh.","text":"<p>Ch\u01b0\u01a1ng tr\u00ecnh <code>fully_connect.py</code></p>"},{"location":"Neural%20Network/explain_fully_connect/#tong-quan-muc-tieu-cua-chuong-trinh-la-gi","title":"T\u1ed5ng quan: M\u1ee5c ti\u00eau c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 g\u00ec?","text":"<p>H\u00e3y t\u01b0\u1edfng t\u01b0\u1ee3ng ch\u00fang ta mu\u1ed1n x\u00e2y d\u1ef1ng m\u1ed9t \"b\u1ed9 n\u00e3o\" nh\u00e2n t\u1ea1o \u0111\u01a1n gi\u1ea3n. Ch\u01b0\u01a1ng tr\u00ecnh n\u00e0y th\u1ef1c hi\u1ec7n b\u01b0\u1edbc \u0111\u1ea7u ti\u00ean v\u00e0 c\u01a1 b\u1ea3n nh\u1ea5t:</p> <ol> <li>X\u00e2y d\u1ef1ng m\u1ed9t \"n\u01a1-ron th\u1ea7n kinh\": T\u1ea1o ra m\u1ed9t \u0111\u01a1n v\u1ecb x\u1eed l\u00fd th\u00f4ng tin c\u01a1 b\u1ea3n.</li> <li>Chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u: T\u1ea1o ra m\u1ed9t b\u1ed9 d\u1eef li\u1ec7u m\u1eabu \u0111\u1ec3 \"b\u1ed9 n\u00e3o\" c\u00f3 c\u00e1i \u0111\u1ec3 x\u1eed l\u00fd.</li> <li>Th\u1ef1c hi\u1ec7n m\u1ed9t ph\u00e9p t\u00ednh: \u0110\u01b0a d\u1eef li\u1ec7u qua \"b\u1ed9 n\u00e3o\" v\u00e0 xem k\u1ebft qu\u1ea3 \u0111\u1ea7u ra l\u00e0 g\u00ec.</li> </ol> <p>\u0110\u00e2y l\u00e0 n\u1ec1n t\u1ea3ng c\u1ee7a m\u1ecdi m\u1ea1ng n\u01a1-ron. Hi\u1ec3u r\u00f5 t\u1eebng d\u00f2ng m\u00e3 \u1edf \u0111\u00e2y s\u1ebd gi\u00fap b\u1ea1n n\u1eafm v\u1eefng c\u00e1c kh\u00e1i ni\u1ec7m ph\u1ee9c t\u1ea1p h\u01a1n sau n\u00e0y.</p>"},{"location":"Neural%20Network/explain_fully_connect/#phan-1-chuan-bi-cong-cu-va-nguyen-lieu-imports-data","title":"Ph\u1ea7n 1: Chu\u1ea9n b\u1ecb c\u00f4ng c\u1ee5 v\u00e0 nguy\u00ean li\u1ec7u (Imports &amp; Data)","text":"<p>\u0110\u00e2y l\u00e0 b\u01b0\u1edbc ch\u00fang ta t\u1eadp h\u1ee3p c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 d\u1eef li\u1ec7u c\u1ea7n thi\u1ebft tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u \"x\u00e2y d\u1ef1ng\".</p> <pre><code>import numpy as np\nimport nnfs\nimport matplotlib.pyplot as plt\n\nfrom nnfs.datasets import spiral_data\nnnfs.init()\n</code></pre>"},{"location":"Neural%20Network/explain_fully_connect/#giai-thich-chi-tiet-tung-dong","title":"Gi\u1ea3i th\u00edch chi ti\u1ebft t\u1eebng d\u00f2ng:","text":"<ul> <li> <p><code>import numpy as np</code>:</p> <ul> <li>N\u00f3 l\u00e0 g\u00ec?: <code>NumPy</code> (Numerical Python) l\u00e0 th\u01b0 vi\u1ec7n c\u01a1 b\u1ea3n v\u00e0 quan tr\u1ecdng nh\u1ea5t cho khoa h\u1ecdc d\u1eef li\u1ec7u trong Python. N\u00f3 cung c\u1ea5p m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u c\u1ef1c k\u1ef3 hi\u1ec7u qu\u1ea3 g\u1ecdi l\u00e0 m\u1ea3ng (array) v\u00e0 c\u00e1c c\u00f4ng c\u1ee5 \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c ph\u00e9p to\u00e1n tr\u00ean m\u1ea3ng \u0111\u00f3, \u0111\u1eb7c bi\u1ec7t l\u00e0 to\u00e1n ma tr\u1eadn.</li> <li>T\u1ea1i sao c\u1ea7n n\u00f3?: M\u1ea1ng n\u01a1-ron v\u1ec1 b\u1ea3n ch\u1ea5t l\u00e0 m\u1ed9t chu\u1ed7i c\u00e1c ph\u00e9p to\u00e1n ma tr\u1eadn. NumPy gi\u00fap ch\u00fang ta th\u1ef1c hi\u1ec7n c\u00e1c ph\u00e9p nh\u00e2n, c\u1ed9ng ma tr\u1eadn n\u00e0y m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 hi\u1ec7u qu\u1ea3 h\u01a1n r\u1ea5t nhi\u1ec1u so v\u1edbi vi\u1ec7c d\u00f9ng list th\u00f4ng th\u01b0\u1eddng c\u1ee7a Python. <code>as np</code> l\u00e0 m\u1ed9t quy \u01b0\u1edbc ph\u1ed5 bi\u1ebfn \u0111\u1ec3 \u0111\u1eb7t t\u00ean vi\u1ebft t\u1eaft cho th\u01b0 vi\u1ec7n.</li> </ul> </li> <li> <p><code>import nnfs</code>:</p> <ul> <li>N\u00f3 l\u00e0 g\u00ec?: <code>nnfs</code> (Neural Networks from Scratch) l\u00e0 m\u1ed9t th\u01b0 vi\u1ec7n h\u1ed7 tr\u1ee3 \u0111\u01b0\u1ee3c vi\u1ebft ri\u00eang cho cu\u1ed1n s\u00e1ch c\u00f9ng t\u00ean. M\u1ee5c \u0111\u00edch c\u1ee7a n\u00f3 l\u00e0 gi\u00fap ng\u01b0\u1eddi h\u1ecdc t\u1eadp trung v\u00e0o kh\u00e1i ni\u1ec7m m\u1ea1ng n\u01a1-ron thay v\u00ec b\u1ecb sa \u0111\u00e0 v\u00e0o c\u00e1c chi ti\u1ebft ph\u1ee5.</li> <li>T\u1ea1i sao c\u1ea7n n\u00f3?: N\u00f3 cung c\u1ea5p c\u00e1c h\u00e0m ti\u1ec7n \u00edch, nh\u01b0 t\u1ea1o d\u1eef li\u1ec7u m\u1eabu (<code>spiral_data</code>) v\u00e0 kh\u1edfi t\u1ea1o m\u00f4i tr\u01b0\u1eddng (<code>init</code>) \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o k\u1ebft qu\u1ea3 c\u1ee7a m\u1ecdi ng\u01b0\u1eddi \u0111\u1ec1u gi\u1ed1ng nhau, d\u1ec5 d\u00e0ng cho vi\u1ec7c h\u1ecdc v\u00e0 g\u1ee1 l\u1ed7i.</li> </ul> </li> <li> <p><code>import matplotlib.pyplot as plt</code>:</p> <ul> <li>N\u00f3 l\u00e0 g\u00ec?: <code>Matplotlib</code> l\u00e0 th\u01b0 vi\u1ec7n tr\u1ef1c quan h\u00f3a d\u1eef li\u1ec7u (v\u1ebd \u0111\u1ed3 th\u1ecb) ph\u1ed5 bi\u1ebfn nh\u1ea5t trong Python. <code>pyplot</code> l\u00e0 m\u1ed9t module trong Matplotlib cung c\u1ea5p giao di\u1ec7n gi\u1ed1ng nh\u01b0 MATLAB.</li> <li>T\u1ea1i sao c\u1ea7n n\u00f3?: \"Tr\u0103m nghe kh\u00f4ng b\u1eb1ng m\u1ed9t th\u1ea5y\". Th\u01b0 vi\u1ec7n n\u00e0y cho ph\u00e9p ch\u00fang ta v\u1ebd d\u1eef li\u1ec7u l\u00ean bi\u1ec3u \u0111\u1ed3 \u0111\u1ec3 xem n\u00f3 tr\u00f4ng nh\u01b0 th\u1ebf n\u00e0o. Vi\u1ec7c nh\u00ecn th\u1ea5y d\u1eef li\u1ec7u h\u00ecnh xo\u1eafn \u1ed1c gi\u00fap ta hi\u1ec3u r\u00f5 h\u01a1n b\u00e0i to\u00e1n m\u00e0 m\u1ea1ng n\u01a1-ron \u0111ang c\u1ed1 g\u1eafng gi\u1ea3i quy\u1ebft.</li> </ul> </li> <li> <p><code>from nnfs.datasets import spiral_data</code>:</p> <ul> <li>N\u00f3 l\u00e0 g\u00ec?: \u0110\u00e2y l\u00e0 m\u1ed9t l\u1ec7nh <code>import</code> c\u1ee5 th\u1ec3. Thay v\u00ec nh\u1eadp c\u1ea3 th\u01b0 vi\u1ec7n <code>nnfs.datasets</code>, ch\u00fang ta ch\u1ec9 l\u1ea5y ri\u00eang h\u00e0m <code>spiral_data</code> t\u1eeb \u0111\u00f3.</li> <li>T\u1ea1i sao c\u1ea7n n\u00f3?: <code>spiral_data</code> l\u00e0 m\u1ed9t h\u00e0m gi\u00fap t\u1ea1o ra b\u1ed9 d\u1eef li\u1ec7u h\u00ecnh xo\u1eafn \u1ed1c n\u1ed5i ti\u1ebfng, m\u1ed9t b\u00e0i to\u00e1n kinh \u0111i\u1ec3n \u0111\u1ec3 ki\u1ec3m tra kh\u1ea3 n\u0103ng c\u1ee7a c\u00e1c m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i.</li> </ul> </li> <li> <p><code>nnfs.init()</code>:</p> <ul> <li>N\u00f3 l\u00e0 g\u00ec?: L\u1ec7nh n\u00e0y g\u1ecdi h\u00e0m <code>init</code> t\u1eeb th\u01b0 vi\u1ec7n <code>nnfs</code>.</li> <li>T\u1ea1i sao c\u1ea7n n\u00f3?: H\u00e0m n\u00e0y th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 c\u00e0i \u0111\u1eb7t n\u1ec1n, quan tr\u1ecdng nh\u1ea5t l\u00e0 c\u1ed1 \u0111\u1ecbnh seed cho vi\u1ec7c sinh s\u1ed1 ng\u1eabu nhi\u00ean c\u1ee7a NumPy v\u00e0 thi\u1ebft l\u1eadp ki\u1ec3u d\u1eef li\u1ec7u m\u1eb7c \u0111\u1ecbnh. \u0110i\u1ec1u n\u00e0y \u0111\u1ea3m b\u1ea3o r\u1eb1ng m\u1ed7i khi b\u1ea1n ch\u1ea1y l\u1ea1i m\u00e3, c\u00e1c \"tr\u1ecdng s\u1ed1 ng\u1eabu nhi\u00ean\" v\u00e0 \"d\u1eef li\u1ec7u\" \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd lu\u00f4n gi\u1ed1ng h\u1ec7t nhau, gi\u00fap vi\u1ec7c h\u1ecdc v\u00e0 t\u00e1i t\u1ea1o k\u1ebft qu\u1ea3 tr\u1edf n\u00ean nh\u1ea5t qu\u00e1n.</li> </ul> </li> </ul>"},{"location":"Neural%20Network/explain_fully_connect/#phan-2-xay-dung-ban-thiet-ke-cua-mot-vi-giam-khao-class-layer_dense","title":"Ph\u1ea7n 2: X\u00e2y d\u1ef1ng \"B\u1ea3n thi\u1ebft k\u1ebf c\u1ee7a m\u1ed9t V\u1ecb Gi\u00e1m kh\u1ea3o\" (<code>class Layer_Dense</code>)","text":"<p>\u0110\u00e2y l\u00e0 tr\u00e1i tim c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh. Ch\u00fang ta kh\u00f4ng x\u00e2y d\u1ef1ng m\u1ed9t n\u01a1-ron ri\u00eang l\u1ebb, m\u00e0 l\u00e0 m\u1ed9t \"b\u1ea3n thi\u1ebft k\u1ebf\" (<code>class</code>) \u0111\u1ec3 c\u00f3 th\u1ec3 t\u1ea1o ra c\u1ea3 m\u1ed9t l\u1edbp/m\u1ed9t ban gi\u00e1m kh\u1ea3o m\u1ed9t c\u00e1ch d\u1ec5 d\u00e0ng.</p> <pre><code>class Layer_Dense:\n        def __init__(self, n_inputs, n_neurons):\n            self.weights = 0.01 * np.random.randn(n_inputs, n_neurons)\n            self.biases = np.zeros((1, n_neurons))\n        def forward(self, inputs):\n            self.output = np.dot(inputs, self.weights) + self.biases\n</code></pre>"},{"location":"Neural%20Network/explain_fully_connect/#giai-thich-chi-tiet-tung-phan","title":"Gi\u1ea3i th\u00edch chi ti\u1ebft t\u1eebng ph\u1ea7n:","text":"<ul> <li> <p><code>class Layer_Dense:</code>: Khai b\u00e1o m\u1ed9t \"b\u1ea3n thi\u1ebft k\u1ebf\" t\u00ean l\u00e0 <code>Layer_Dense</code>. M\u1ecdi th\u1ee9 b\u00ean trong n\u00f3 s\u1ebd \u0111\u1ecbnh ngh\u0129a c\u00e1c thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi c\u1ee7a m\u1ed9t l\u1edbp n\u01a1-ron d\u00e0y \u0111\u1eb7c.</p> </li> <li> <p><code>def __init__(self, n_inputs, n_neurons):</code>: H\u00e0m kh\u1edfi t\u1ea1o (constructor).</p> <ul> <li>N\u00f3 l\u00e0m g\u00ec?: H\u00e0m n\u00e0y \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng g\u1ecdi m\u1ed7i khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb b\u1ea3n thi\u1ebft k\u1ebf n\u00e0y (v\u00ed d\u1ee5 <code>dense1 = Layer_Dense(...)</code>). N\u00f3 d\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp c\u00e1c thu\u1ed9c t\u00ednh ban \u0111\u1ea7u.</li> <li><code>self</code>: \u0110\u1ea1i di\u1ec7n cho ch\u00ednh \u0111\u1ed1i t\u01b0\u1ee3ng s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra. Khi b\u1ea1n g\u1ecdi <code>dense1.weights</code>, <code>self</code> ch\u00ednh l\u00e0 <code>dense1</code>.</li> <li><code>n_inputs</code>: S\u1ed1 l\u01b0\u1ee3ng \u0111\u1eb7c tr\u01b0ng \u0111\u1ea7u v\u00e0o m\u00e0 l\u1edbp n\u00e0y s\u1ebd nh\u1eadn (v\u00ed d\u1ee5: 2 \u0111\u1eb7c tr\u01b0ng l\u00e0 \"\u0110\u1ed9 \u0111\u1ecf\" v\u00e0 \"\u0110\u1ed9 tr\u00f2n\" c\u1ee7a hoa qu\u1ea3).</li> <li><code>n_neurons</code>: S\u1ed1 l\u01b0\u1ee3ng n\u01a1-ron trong l\u1edbp n\u00e0y (v\u00ed d\u1ee5: 3 gi\u00e1m kh\u1ea3o, m\u1ed7i ng\u01b0\u1eddi cho m\u1ed9t lo\u1ea1i qu\u1ea3).</li> <li><code>self.weights = 0.01 * np.random.randn(n_inputs, n_neurons)</code>: \u0110\u00e2y l\u00e0 d\u00f2ng c\u1ef1c k\u1ef3 quan tr\u1ecdng.<ul> <li><code>np.random.randn(n_inputs, n_neurons)</code>: T\u1ea1o m\u1ed9t ma tr\u1eadn c\u00f3 k\u00edch th\u01b0\u1edbc <code>(s\u1ed1_\u0111\u1ea7u_v\u00e0o, s\u1ed1_n\u01a1_ron)</code> ch\u1ee9a \u0111\u1ea7y c\u00e1c s\u1ed1 ng\u1eabu nhi\u00ean theo ph\u00e2n ph\u1ed1i chu\u1ea9n (ph\u00e2n ph\u1ed1i Gauss, c\u00f3 gi\u00e1 tr\u1ecb trung b\u00ecnh l\u00e0 0 v\u00e0 ph\u01b0\u01a1ng sai l\u00e0 1). \u0110\u00e2y ch\u00ednh l\u00e0 \"s\u1ef1 \u01b0u ti\u00ean\" ban \u0111\u1ea7u, ho\u00e0n to\u00e0n ng\u1eabu nhi\u00ean c\u1ee7a c\u00e1c v\u1ecb gi\u00e1m kh\u1ea3o.</li> <li><code>* 0.01</code>: Nh\u00e2n t\u1ea5t c\u1ea3 c\u00e1c tr\u1ecdng s\u1ed1 ng\u1eabu nhi\u00ean v\u1edbi m\u1ed9t s\u1ed1 r\u1ea5t nh\u1ecf. \u0110\u00e2y l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt ph\u1ed5 bi\u1ebfn \u0111\u1ec3 ng\u0103n c\u00e1c gi\u00e1 tr\u1ecb \u0111\u1ea7u ra ban \u0111\u1ea7u qu\u00e1 l\u1edbn, gi\u00fap qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n sau n\u00e0y \u1ed5n \u0111\u1ecbnh h\u01a1n.</li> </ul> </li> <li><code>self.biases = np.zeros((1, n_neurons))</code>:<ul> <li><code>np.zeros((1, n_neurons))</code>: T\u1ea1o m\u1ed9t ma tr\u1eadn h\u00e0ng (vector) c\u00f3 k\u00edch th\u01b0\u1edbc <code>(1, s\u1ed1_n\u01a1_ron)</code> ch\u1ee9a to\u00e0n s\u1ed1 0. \u0110\u00e2y l\u00e0 \"th\u00e0nh ki\u1ebfn\" hay \"t\u00e2m tr\u1ea1ng\" ban \u0111\u1ea7u c\u1ee7a c\u00e1c v\u1ecb gi\u00e1m kh\u1ea3o. Vi\u1ec7c kh\u1edfi t\u1ea1o b\u1eb1ng 0 c\u00f3 ngh\u0129a l\u00e0 ban \u0111\u1ea7u, h\u1ecd kh\u00f4ng c\u00f3 b\u1ea5t k\u1ef3 thi\u00ean v\u1ecb n\u00e0o.</li> </ul> </li> </ul> </li> <li> <p><code>def forward(self, inputs):</code>: Ph\u01b0\u01a1ng th\u1ee9c h\u00e0nh \u0111\u1ed9ng.</p> <ul> <li>N\u00f3 l\u00e0m g\u00ec?: \u0110\u1ecbnh ngh\u0129a h\u00e0nh vi ch\u00ednh c\u1ee7a l\u1edbp: nh\u1eadn d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o v\u00e0 t\u00ednh to\u00e1n \u0111\u1ea7u ra. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 truy\u1ec1n xu\u00f4i (forward pass).</li> <li><code>inputs</code>: D\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o l\u1edbp (v\u00ed d\u1ee5: danh s\u00e1ch c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a t\u1ea5t c\u1ea3 hoa qu\u1ea3).</li> <li><code>self.output = np.dot(inputs, self.weights) + self.biases</code>: C\u00f4ng th\u1ee9c to\u00e1n h\u1ecdc c\u1ed1t l\u00f5i.<ul> <li><code>np.dot(inputs, self.weights)</code>: Ph\u00e9p nh\u00e2n ma tr\u1eadn. \u0110\u00e2y l\u00e0 l\u00fac m\u1ed7i gi\u00e1m kh\u1ea3o \"nh\u00ecn\" v\u00e0o c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a hoa qu\u1ea3 v\u00e0 nh\u00e2n ch\u00fang v\u1edbi \"s\u1ef1 \u01b0u ti\u00ean\" (tr\u1ecdng s\u1ed1) c\u1ee7a m\u00ecnh \u0111\u1ec3 \u0111\u01b0a ra m\u1ed9t \u0111i\u1ec3m s\u1ed1 s\u01a1 b\u1ed9.</li> <li><code>+ self.biases</code>: C\u1ed9ng th\u00eam \"th\u00e0nh ki\u1ebfn\" (thi\u00ean v\u1ecb) c\u1ee7a m\u1ed7i gi\u00e1m kh\u1ea3o v\u00e0o \u0111i\u1ec3m s\u1ed1 c\u1ee7a h\u1ecd.</li> <li><code>self.output = ...</code>: K\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o thu\u1ed9c t\u00ednh <code>output</code> c\u1ee7a l\u1edbp.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Neural%20Network/explain_fully_connect/#phan-3-cuoc-thi-bat-au-su-dung-lop-va-du-lieu","title":"Ph\u1ea7n 3: Cu\u1ed9c thi b\u1eaft \u0111\u1ea7u! (S\u1eed d\u1ee5ng l\u1edbp v\u00e0 d\u1eef li\u1ec7u)","text":"<p>B\u00e2y gi\u1edd ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng \"b\u1ea3n thi\u1ebft k\u1ebf\" v\u00e0 \"nguy\u00ean li\u1ec7u\" \u0111\u00e3 chu\u1ea9n b\u1ecb \u1edf tr\u00ean \u0111\u1ec3 ti\u1ebfn h\u00e0nh m\u1ed9t cu\u1ed9c thi th\u1ef1c s\u1ef1.</p> <pre><code># Create dataset\nX, y = spiral_data(samples=100, classes=3)\n# Visualize dataset\nplt.scatter(X[:,0], X[:,1], c=y, cmap='brg')\nplt.show()\n</code></pre> <ul> <li><code>X, y = spiral_data(samples=100, classes=3)</code>: G\u1ecdi h\u00e0m \u0111\u00e3 nh\u1eadp \u0111\u1ec3 t\u1ea1o d\u1eef li\u1ec7u.<ul> <li><code>X</code>: S\u1ebd l\u00e0 m\u1ed9t m\u1ea3ng NumPy k\u00edch th\u01b0\u1edbc <code>(300, 2)</code>. 300 l\u00e0 v\u00ec c\u00f3 3 l\u1edbp (<code>classes</code>), m\u1ed7i l\u1edbp 100 m\u1eabu (<code>samples</code>). 2 l\u00e0 v\u00ec m\u1ed7i m\u1eabu c\u00f3 2 \u0111\u1eb7c tr\u01b0ng (t\u1ecda \u0111\u1ed9 x, y). \u0110\u00e2y l\u00e0 \"danh s\u00e1ch c\u00e1c th\u00ed sinh hoa qu\u1ea3 v\u00e0 \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a ch\u00fang\".</li> <li><code>y</code>: S\u1ebd l\u00e0 m\u1ed9t m\u1ea3ng NumPy k\u00edch th\u01b0\u1edbc <code>(300,)</code> ch\u1ee9a c\u00e1c nh\u00e3n <code>0, 1, 2</code>. \u0110\u00e2y l\u00e0 \"\u0111\u00e1p \u00e1n \u0111\u00fang\" cho m\u1ed7i th\u00ed sinh (T\u00e1o, Cam, hay Chu\u1ed1i).</li> </ul> </li> <li><code>plt.scatter(X[:,0], X[:,1], c=y, cmap='brg')</code>: Chu\u1ea9n b\u1ecb v\u1ebd \u0111\u1ed3 th\u1ecb.<ul> <li><code>X[:,0]</code>: L\u1ea5y t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng, c\u1ed9t \u0111\u1ea7u ti\u00ean (t\u1ea5t c\u1ea3 t\u1ecda \u0111\u1ed9 x).</li> <li><code>X[:,1]</code>: L\u1ea5y t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng, c\u1ed9t th\u1ee9 hai (t\u1ea5t c\u1ea3 t\u1ecda \u0111\u1ed9 y).</li> <li><code>c=y</code>: <code>c</code> l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a color. L\u1ec7nh n\u00e0y b\u1ea3o Matplotlib h\u00e3y t\u00f4 m\u00e0u cho m\u1ed7i \u0111i\u1ec3m <code>(x, y)</code> d\u1ef1a tr\u00ean gi\u00e1 tr\u1ecb t\u01b0\u01a1ng \u1ee9ng trong m\u1ea3ng <code>y</code>. C\u00e1c \u0111i\u1ec3m c\u00f3 <code>y=0</code> s\u1ebd c\u00f9ng m\u00e0u, <code>y=1</code> c\u00f9ng m\u00e0u kh\u00e1c,...</li> <li><code>cmap='brg'</code>: Color map. Ch\u1ecdn b\u1ea3ng m\u00e0u Xanh-\u0110\u1ecf-L\u00e1 (Blue-Red-Green).</li> </ul> </li> <li><code>plt.show()</code>: Hi\u1ec3n th\u1ecb \u0111\u1ed3 th\u1ecb \u0111\u00e3 chu\u1ea9n b\u1ecb l\u00ean m\u00e0n h\u00ecnh.</li> </ul> <p><pre><code># Create Dense layer with 2 input features and 3 output values\ndense1 = Layer_Dense(2, 3)\n</code></pre> *   \u0110\u00e2y l\u00e0 l\u00fac ch\u00fang ta t\u1ea1o ra m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng t\u1eeb b\u1ea3n thi\u1ebft k\u1ebf <code>Layer_Dense</code>. Ch\u00fang ta \u0111ang \"thu\u00ea m\u1ed9t ban gi\u00e1m kh\u1ea3o\". *   <code>dense1 = ...</code>: T\u1ea1o m\u1ed9t ban gi\u00e1m kh\u1ea3o c\u1ee5 th\u1ec3 t\u00ean l\u00e0 <code>dense1</code>. *   <code>Layer_Dense(2, 3)</code>: G\u1ecdi h\u00e0m <code>__init__</code>.     *   <code>n_inputs=2</code>: V\u00ec m\u1ed7i \"th\u00ed sinh hoa qu\u1ea3\" (<code>X</code>) c\u00f3 2 \u0111\u1eb7c tr\u01b0ng (t\u1ecda \u0111\u1ed9 x, y).     *   <code>n_neurons=3</code>: V\u00ec ch\u00fang ta c\u1ea7n ph\u00e2n lo\u1ea1i th\u00e0nh 3 lo\u1ea1i qu\u1ea3 (3 l\u1edbp trong <code>y</code>). Ch\u00fang ta c\u1ea7n 3 gi\u00e1m kh\u1ea3o, m\u1ed7i ng\u01b0\u1eddi chuy\u00ean v\u1ec1 m\u1ed9t lo\u1ea1i.</p> <p><pre><code># Let's see initial weights and biases\nprint(\"&gt;&gt;&gt; Initial weights and biases of the first layer:\")\nprint(dense1.weights)\nprint(dense1.biases)\n</code></pre> *   In ra c\u00e1c thu\u1ed9c t\u00ednh <code>weights</code> v\u00e0 <code>biases</code> c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng <code>dense1</code> v\u1eeba t\u1ea1o. \u0110i\u1ec1u n\u00e0y cho ch\u00fang ta th\u1ea5y \"s\u1ef1 \u01b0u ti\u00ean\" v\u00e0 \"th\u00e0nh ki\u1ebfn\" ban \u0111\u1ea7u, ho\u00e0n to\u00e0n ng\u1eabu nhi\u00ean c\u1ee7a ban gi\u00e1m kh\u1ea3o tr\u01b0\u1edbc khi h\u1ecd ch\u1ea5m \u0111i\u1ec3m b\u1ea5t k\u1ef3 th\u00ed sinh n\u00e0o.</p> <p><pre><code># Perform a forward pass of our training data through this layer\ndense1.forward(X)\n</code></pre> *   \u0110\u00e2y l\u00e0 kho\u1ea3nh kh\u1eafc h\u00e0nh \u0111\u1ed9ng. Ch\u00fang ta g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c <code>forward</code> c\u1ee7a <code>dense1</code> v\u00e0 \u0111\u01b0a to\u00e0n b\u1ed9 \"danh s\u00e1ch th\u00ed sinh\" (<code>X</code>) v\u00e0o. Ph\u00e9p t\u00ednh <code>np.dot(X, dense1.weights) + dense1.biases</code> \u0111\u01b0\u1ee3c th\u1ef1c thi. Ban gi\u00e1m kh\u1ea3o b\u1eaft \u0111\u1ea7u ch\u1ea5m \u0111i\u1ec3m.</p> <p><pre><code># Let's see output of the first few samples:\nprint(\"&gt;&gt;&gt; Output of the first few samples:\")\nprint(dense1.output[:5])\n</code></pre> *   Sau khi <code>forward()</code> ch\u1ea1y xong, k\u1ebft qu\u1ea3 \u0111\u01b0\u1ee3c l\u01b0u trong <code>dense1.output</code>. *   <code>dense1.output[:5]</code>: Ch\u00fang ta in ra k\u1ebft qu\u1ea3 ch\u1ea5m \u0111i\u1ec3m cho 5 \"th\u00ed sinh hoa qu\u1ea3\" \u0111\u1ea7u ti\u00ean \u0111\u1ec3 xem th\u1eed. M\u1ed7i h\u00e0ng l\u00e0 m\u1ed9t th\u00ed sinh, m\u1ed7i c\u1ed9t l\u00e0 \u0111i\u1ec3m s\u1ed1 t\u1eeb m\u1ed9t gi\u00e1m kh\u1ea3o. C\u00e1c gi\u00e1 tr\u1ecb n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 logits.</p>"},{"location":"Neural%20Network/explain_fully_connect/#phan-4-dien-giai-truu-tuong-cuoc-thi-phan-loai-hoa-qua","title":"Ph\u1ea7n 4: Di\u1ec5n gi\u1ea3i tr\u1eebu t\u01b0\u1ee3ng - Cu\u1ed9c thi ph\u00e2n lo\u1ea1i hoa qu\u1ea3","text":"<p>H\u00e3y k\u1ec3 l\u1ea1i to\u00e0n b\u1ed9 c\u00e2u chuy\u1ec7n m\u1ed9t c\u00e1ch li\u1ec1n m\u1ea1ch:</p> <ol> <li> <p>B\u1ed1i c\u1ea3nh: Ch\u00fang ta t\u1ed5 ch\u1ee9c m\u1ed9t cu\u1ed9c thi \u0111\u1ec3 ph\u00e2n lo\u1ea1i 3 lo\u1ea1i qu\u1ea3: T\u00e1o, Cam, v\u00e0 Chu\u1ed1i.</p> </li> <li> <p>C\u00e1c th\u00ed sinh (<code>X</code>, <code>y</code>): C\u00f3 300 qu\u1ea3 tham gia. V\u1edbi m\u1ed7i qu\u1ea3, ch\u00fang ta d\u00f9ng m\u00e1y \u0111o \u0111\u01b0\u1ee3c 2 \u0111\u1eb7c \u0111i\u1ec3m: \"\u0110\u1ed9 \u0111\u1ecf\" v\u00e0 \"\u0110\u1ed9 tr\u00f2n\" (\u0111\u00e2y l\u00e0 2 c\u1ed9t c\u1ee7a <code>X</code>). Ch\u00fang ta c\u0169ng bi\u1ebft tr\u01b0\u1edbc \u0111\u00e1p \u00e1n m\u1ed7i qu\u1ea3 l\u00e0 g\u00ec (\u0111\u00e2y l\u00e0 <code>y</code>).</p> </li> <li> <p>Thu\u00ea ban gi\u00e1m kh\u1ea3o (<code>dense1 = Layer_Dense(2, 3)</code>): Ch\u00fang ta thu\u00ea m\u1ed9t ban gi\u00e1m kh\u1ea3o g\u1ed3m 3 ng\u01b0\u1eddi:</p> <ul> <li>Gi\u00e1m kh\u1ea3o 1: Chuy\u00ean gia v\u1ec1 T\u00e1o.</li> <li>Gi\u00e1m kh\u1ea3o 2: Chuy\u00ean gia v\u1ec1 Cam.</li> <li>Gi\u00e1m kh\u1ea3o 3: Chuy\u00ean gia v\u1ec1 Chu\u1ed1i. H\u1ecd l\u00e0 nh\u1eefng ng\u01b0\u1eddi m\u1edbi v\u00e0o ngh\u1ec1, n\u00ean \"ki\u1ebfn th\u1ee9c\" c\u1ee7a h\u1ecd ban \u0111\u1ea7u l\u00e0 ng\u1eabu nhi\u00ean.</li> </ul> </li> <li> <p>Ki\u1ebfn th\u1ee9c c\u1ee7a gi\u00e1m kh\u1ea3o (<code>weights</code> v\u00e0 <code>biases</code>):</p> <ul> <li>S\u1ef1 \u01b0u ti\u00ean (<code>weights</code>): M\u1ed7i gi\u00e1m kh\u1ea3o c\u00f3 m\u1ed9t b\u1ed9 \"\u01b0u ti\u00ean\" ri\u00eang cho 2 \u0111\u1eb7c \u0111i\u1ec3m \"\u0110\u1ed9 \u0111\u1ecf\" v\u00e0 \"\u0110\u1ed9 tr\u00f2n\". V\u00ed d\u1ee5, chuy\u00ean gia T\u00e1o l\u00fd t\u01b0\u1edfng s\u1ebd c\u00f3 \u01b0u ti\u00ean cao cho \"\u0110\u1ed9 \u0111\u1ecf\" v\u00e0 \"\u0110\u1ed9 tr\u00f2n\". Chuy\u00ean gia Chu\u1ed1i s\u1ebd c\u00f3 \u01b0u ti\u00ean \u00e2m cho \"\u0110\u1ed9 tr\u00f2n\" (v\u00ec chu\u1ed1i d\u00e0i). Nh\u01b0ng v\u00ec h\u1ecd l\u00e0 ng\u01b0\u1eddi m\u1edbi, c\u00e1c \u01b0u ti\u00ean n\u00e0y \u0111\u01b0\u1ee3c g\u00e1n ng\u1eabu nhi\u00ean (v\u00ed d\u1ee5: chuy\u00ean gia T\u00e1o l\u1ea1i c\u00f3 th\u1ec3 th\u00edch qu\u1ea3 kh\u00f4ng \u0111\u1ecf, chuy\u00ean gia Chu\u1ed1i l\u1ea1i th\u00edch qu\u1ea3 tr\u00f2n).</li> <li>T\u00e2m tr\u1ea1ng (<code>biases</code>): Ban \u0111\u1ea7u, c\u1ea3 3 gi\u00e1m kh\u1ea3o \u0111\u1ec1u c\u00f3 t\u00e2m tr\u1ea1ng trung l\u1eadp (b\u1eb1ng 0).</li> </ul> </li> <li> <p>Qu\u00e1 tr\u00ecnh ch\u1ea5m \u0111i\u1ec3m (<code>dense1.forward(X)</code>):</p> <ul> <li>T\u1eebng qu\u1ea3 m\u1ed9t \u0111\u01b0\u1ee3c \u0111\u01b0a ra tr\u01b0\u1edbc ban gi\u00e1m kh\u1ea3o.</li> <li>M\u1ed7i gi\u00e1m kh\u1ea3o t\u00ednh \u0111i\u1ec3m c\u1ee7a m\u00ecnh theo c\u00f4ng th\u1ee9c:     <code>\u0110i\u1ec3m = (\u0110\u1ed9 \u0111\u1ecf * \u01afu ti\u00ean cho \u0111\u1ed9 \u0111\u1ecf) + (\u0110\u1ed9 tr\u00f2n * \u01afu ti\u00ean cho \u0111\u1ed9 tr\u00f2n) + T\u00e2m tr\u1ea1ng</code></li> <li>Qu\u00e1 tr\u00ecnh n\u00e0y di\u1ec5n ra cho t\u1ea5t c\u1ea3 300 qu\u1ea3.</li> </ul> </li> <li> <p>B\u1ea3ng \u0111i\u1ec3m (<code>dense1.output</code>):</p> <ul> <li>K\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng l\u00e0 m\u1ed9t b\u1ea3ng \u0111i\u1ec3m l\u1edbn. M\u1ed7i h\u00e0ng l\u00e0 m\u1ed9t qu\u1ea3, m\u1ed7i c\u1ed9t l\u00e0 \u0111i\u1ec3m s\u1ed1 t\u1eeb m\u1ed9t gi\u00e1m kh\u1ea3o.</li> <li>V\u00ed d\u1ee5, d\u00f2ng \u0111\u1ea7u ti\u00ean c\u00f3 th\u1ec3 l\u00e0 <code>[0.0012, -0.0045, 0.0031]</code>. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 v\u1edbi ki\u1ebfn th\u1ee9c ng\u1eabu nhi\u00ean hi\u1ec7n t\u1ea1i, Gi\u00e1m kh\u1ea3o T\u00e1o cho qu\u1ea3 n\u00e0y 0.0012 \u0111i\u1ec3m, Gi\u00e1m kh\u1ea3o Cam cho -0.0045 \u0111i\u1ec3m, v\u00e0 Gi\u00e1m kh\u1ea3o Chu\u1ed1i cho 0.0031 \u0111i\u1ec3m.</li> </ul> </li> </ol> <p>K\u1ebft lu\u1eadn quan tr\u1ecdng: V\u00ec \"ki\u1ebfn th\u1ee9c\" (weights) c\u1ee7a ban gi\u00e1m kh\u1ea3o l\u00e0 ng\u1eabu nhi\u00ean, n\u00ean \"b\u1ea3ng \u0111i\u1ec3m\" (output) n\u00e0y ho\u00e0n to\u00e0n v\u00f4 ngh\u0129a. Qu\u00e1 tr\u00ecnh \"hu\u1ea5n luy\u1ec7n\" (training), kh\u00f4ng c\u00f3 trong m\u00e3 n\u00e0y, ch\u00ednh l\u00e0 vi\u1ec7c cho ban gi\u00e1m kh\u1ea3o xem \u0111\u00e1p \u00e1n \u0111\u00fang (<code>y</code>), ch\u1ec9 ra l\u1ed7i sai c\u1ee7a h\u1ecd, v\u00e0 gi\u00fap h\u1ecd \u0111i\u1ec1u ch\u1ec9nh l\u1ea1i \"s\u1ef1 \u01b0u ti\u00ean\" (<code>weights</code>) v\u00e0 \"t\u00e2m tr\u1ea1ng\" (<code>biases</code>) qua h\u00e0ng ng\u00e0n l\u1ea7n l\u1eb7p, \u0111\u1ec3 cu\u1ed1i c\u00f9ng b\u1ea3ng \u0111i\u1ec3m c\u1ee7a h\u1ecd ph\u1ea3n \u00e1nh \u0111\u00fang lo\u1ea1i qu\u1ea3.</p>"},{"location":"Neural%20Network/explain_fully_connect/#phan-5-so-o-minh-hoa-ascii","title":"Ph\u1ea7n 5: S\u01a1 \u0111\u1ed3 minh h\u1ecda (ASCII)","text":"<p>S\u01a1 \u0111\u1ed3 cho m\u1ed9t qu\u1ea3 duy nh\u1ea5t \u0111i qua ban gi\u00e1m kh\u1ea3o:  <pre><code>        \u0110\u1ea6U V\u00c0O (1 qu\u1ea3)\n        (2 \u0111\u1eb7c tr\u01b0ng)\n        +----------------------+\n        | \u0110\u1ed9 \u0111\u1ecf, \u0110\u1ed9 tr\u00f2n       |\n        +----------------------+\n               |\n               |                                 BAN GI\u00c1M KH\u1ea2O (dense1)\n               |                                 (3 Gi\u00e1m kh\u1ea3o/N\u01a1-ron)\n               |\n               |       \u01afu ti\u00ean (w11, w21)      +--------------------+   (\u0110i\u1ec3m t\u1eeb GK T\u00e1o)\n               +-----------------------------&gt;|  Gi\u00e1m kh\u1ea3o T\u00c1O   + b1|-----&gt; output_1\n               |                             +--------------------+\n               |\n               |       \u01afu ti\u00ean (w12, w22)      +--------------------+   (\u0110i\u1ec3m t\u1eeb GK Cam)\n               +-----------------------------&gt;|  Gi\u00e1m kh\u1ea3o CAM   + b2|-----&gt; output_2\n               |                             +--------------------+\n               |\n               |       \u01afu ti\u00ean (w13, w23)      +--------------------+   (\u0110i\u1ec3m t\u1eeb GK Chu\u1ed1i)\n               +-----------------------------&gt;|  Gi\u00e1m kh\u1ea3o CHU\u1ed0I + b3|-----&gt; output_3\n                                             +--------------------+\n\n\nC\u00f4ng th\u1ee9c t\u00ednh \u0111i\u1ec3m c\u1ee7a Gi\u00e1m kh\u1ea3o T\u00c1O:\noutput_1 = (\u0110\u1ed9 \u0111\u1ecf * w11) + (\u0110\u1ed9 tr\u00f2n * w21) + b1\n\nK\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng cho 1 qu\u1ea3 l\u00e0 m\u1ed9t b\u1ed9 3 \u0111i\u1ec3m: [output_1, output_2, output_3]\n</code></pre></p> <p> </p>"},{"location":"Neural%20Network/explain_fully_connect/#phu-luc-giai-thich","title":"Ph\u1ee5 L\u1ee5c Gi\u1ea3i Th\u00edch:","text":"<p>\u0110\u00e2y l\u00e0 ph\u1ea7n gi\u1ea3i th\u00edch v\u1ec1 \"D\u1eef li\u1ec7u h\u00ecnh xo\u1eafn \u1ed1c\" - nghe c\u00f3 v\u1ebb tr\u1eebu t\u01b0\u1ee3ng, nh\u01b0ng n\u00f3 l\u00e0 m\u1ed9t trong nh\u1eefng b\u1ed9 d\u1eef li\u1ec7u m\u1eabu kinh \u0111i\u1ec3n v\u00e0 quan tr\u1ecdng nh\u1ea5t khi b\u1eaft \u0111\u1ea7u h\u1ecdc v\u1ec1 m\u1ea1ng n\u01a1-ron.</p> <p>H\u00e3y c\u00f9ng ph\u00e2n t\u00edch.</p>"},{"location":"Neural%20Network/explain_fully_connect/#1-inh-nghia-on-gian","title":"1. \u0110\u1ecbnh ngh\u0129a \u0111\u01a1n gi\u1ea3n","text":"<p>D\u1eef li\u1ec7u h\u00ecnh xo\u1eafn \u1ed1c (Spiral Data) l\u00e0 m\u1ed9t b\u1ed9 d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ea1o ra m\u1ed9t c\u00e1ch nh\u00e2n t\u1ea1o, trong \u0111\u00f3 c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u thu\u1ed9c c\u00e1c l\u1edbp kh\u00e1c nhau \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp th\u00e0nh c\u00e1c h\u00ecnh xo\u1eafn \u1ed1c l\u1ed3ng v\u00e0o nhau.</p> <p>H\u00e3y nh\u00ecn l\u1ea1i ch\u00ednh bi\u1ec3u \u0111\u1ed3 m\u00e0 b\u1ea1n \u0111\u00e3 t\u1ea1o ra:</p> <ul> <li>B\u1ea1n c\u00f3 3 l\u1edbp (classes), t\u01b0\u01a1ng \u1ee9ng v\u1edbi 3 m\u00e0u: \u0110\u1ecf, Xanh l\u00e1, v\u00e0 Xanh d\u01b0\u01a1ng.</li> <li>M\u1ed7i \u0111i\u1ec3m c\u00f3 m\u1ed9t v\u1ecb tr\u00ed (t\u1ecda \u0111\u1ed9 x, y).</li> <li>C\u00e1c \u0111i\u1ec3m c\u00f9ng m\u00e0u t\u1ea1o th\u00e0nh m\u1ed9t \"c\u00e1nh tay\" xo\u1eafn \u1ed1c.</li> <li>C\u00e1c c\u00e1nh tay n\u00e0y \u0111an xen, qu\u1ea5n l\u1ea5y nhau.</li> </ul>"},{"location":"Neural%20Network/explain_fully_connect/#2-tai-sao-no-lai-quan-trong-va-noi-tieng","title":"2. T\u1ea1i sao n\u00f3 l\u1ea1i quan tr\u1ecdng v\u00e0 n\u1ed5i ti\u1ebfng?","text":"<p>L\u00fd do b\u1ed9 d\u1eef li\u1ec7u n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng r\u1ed9ng r\u00e3i l\u00e0 v\u00ec n\u00f3 l\u00e0 m\u1ed9t th\u1eed th\u00e1ch ho\u00e0n h\u1ea3o \u0111\u1ec3 ch\u1ee9ng minh s\u1ee9c m\u1ea1nh c\u1ee7a m\u1ea1ng n\u01a1-ron.</p>"},{"location":"Neural%20Network/explain_fully_connect/#a-no-anh-bai-cac-mo-hinh-on-gian-tuyen-tinh","title":"A. N\u00f3 \"\u0111\u00e1nh b\u1ea1i\" c\u00e1c m\u00f4 h\u00ecnh \u0111\u01a1n gi\u1ea3n (Tuy\u1ebfn t\u00ednh)","text":"<p>H\u00e3y t\u01b0\u1edfng t\u01b0\u1ee3ng b\u1ea1n ch\u1ec9 c\u00f3 m\u1ed9t c\u00e2y th\u01b0\u1edbc k\u1ebb. Nhi\u1ec7m v\u1ee5 c\u1ee7a b\u1ea1n l\u00e0 k\u1ebb m\u1ed9t ho\u1eb7c nhi\u1ec1u \u0111\u01b0\u1eddng th\u1eb3ng \u0111\u1ec3 ph\u00e2n chia 3 nh\u00f3m m\u00e0u n\u00e0y ra, sao cho m\u1ed7i v\u00f9ng ch\u1ec9 ch\u1ee9a m\u1ed9t m\u00e0u duy nh\u1ea5t.</p> <p>B\u1ea1n s\u1ebd th\u1ea5y ngay l\u00e0 b\u1ea5t kh\u1ea3 thi.</p> <pre><code>       /\n      /    &lt;-- B\u1ea1n kh\u00f4ng th\u1ec3 k\u1ebb m\u1ed9t \u0111\u01b0\u1eddng th\u1eb3ng n\u00e0o\n     /         \u0111\u1ec3 t\u00e1ch m\u00e0u \u0110\u1ecf (R) ra kh\u1ecfi Xanh (G) v\u00e0 Xanh d\u01b0\u01a1ng (B)\n    /\n   RRRRR\n  G B R G\n B G R B G\nB B G G B B\n R R B R R\n  R G B R\n   BBBBB\n</code></pre> <p>M\u1ed9t m\u00f4 h\u00ecnh ch\u1ec9 c\u00f3 th\u1ec3 k\u1ebb c\u00e1c \u0111\u01b0\u1eddng th\u1eb3ng \u0111\u1ec3 ph\u00e2n lo\u1ea1i \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u00f4 h\u00ecnh tuy\u1ebfn t\u00ednh (linear model). D\u1eef li\u1ec7u xo\u1eafn \u1ed1c l\u00e0 m\u1ed9t v\u00ed d\u1ee5 kinh \u0111i\u1ec3n c\u1ee7a d\u1eef li\u1ec7u phi tuy\u1ebfn (non-linear), n\u01a1i ranh gi\u1edbi gi\u1eefa c\u00e1c l\u1edbp kh\u00f4ng ph\u1ea3i l\u00e0 \u0111\u01b0\u1eddng th\u1eb3ng m\u00e0 l\u00e0 nh\u1eefng \u0111\u01b0\u1eddng cong ph\u1ee9c t\u1ea1p.</p> <p>N\u00f3i c\u00e1ch kh\u00e1c, d\u1eef li\u1ec7u xo\u1eafn \u1ed1c \u0111\u01b0\u1ee3c t\u1ea1o ra \u0111\u1ec3 c\u1ed1 t\u00ecnh l\u00e0m kh\u00f3 c\u00e1c thu\u1eadt to\u00e1n ph\u00e2n lo\u1ea1i \u0111\u01a1n gi\u1ea3n.</p>"},{"location":"Neural%20Network/explain_fully_connect/#b-no-chung-to-su-can-thiet-cua-mang-no-ron","title":"B. N\u00f3 ch\u1ee9ng t\u1ecf s\u1ef1 c\u1ea7n thi\u1ebft c\u1ee7a M\u1ea1ng N\u01a1-ron","text":"<p>M\u1ea1ng n\u01a1-ron, \u0111\u1eb7c bi\u1ec7t l\u00e0 c\u00e1c m\u1ea1ng c\u00f3 c\u00e1c l\u1edbp \u1ea9n (hidden layers) v\u00e0 c\u00e1c h\u00e0m k\u00edch ho\u1ea1t phi tuy\u1ebfn (s\u1ebd h\u1ecdc sau), c\u00f3 kh\u1ea3 n\u0103ng h\u1ecdc \u0111\u01b0\u1ee3c c\u00e1c ranh gi\u1edbi quy\u1ebft \u0111\u1ecbnh (decision boundaries) c\u1ef1c k\u1ef3 ph\u1ee9c t\u1ea1p v\u00e0 u\u1ed1n l\u01b0\u1ee3n.</p> <p>M\u1ed9t m\u1ea1ng n\u01a1-ron \u0111\u01b0\u1ee3c hu\u1ea5n luy\u1ec7n t\u1ed1t c\u00f3 th\u1ec3 t\u1ea1o ra m\u1ed9t ranh gi\u1edbi tr\u00f4ng gi\u1ed1ng nh\u01b0 th\u1ebf n\u00e0y:</p> <p>N\u00f3 kh\u00f4ng d\u00f9ng \"th\u01b0\u1edbc k\u1ebb\", m\u00e0 n\u00f3 h\u1ecdc c\u00e1ch \"v\u1ebd\" ra nh\u1eefng \u0111\u01b0\u1eddng cong m\u1ec1m m\u1ea1i \u0111\u1ec3 bao quanh t\u1eebng nh\u00f3m d\u1eef li\u1ec7u m\u1ed9t c\u00e1ch ho\u00e0n h\u1ea3o.</p> <p>K\u1ebft lu\u1eadn: D\u1eef li\u1ec7u xo\u1eafn \u1ed1c l\u00e0 m\u1ed9t b\u00e0i ki\u1ec3m tra \"t\u1ed1t nghi\u1ec7p\" cho m\u1ed9t m\u00f4 h\u00ecnh ph\u00e2n lo\u1ea1i. N\u1ebfu m\u00f4 h\u00ecnh c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c b\u00e0i to\u00e1n n\u00e0y, n\u00f3 ch\u1ee9ng t\u1ecf r\u1eb1ng n\u00f3 c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd c\u00e1c m\u1ed1i quan h\u1ec7 ph\u1ee9c t\u1ea1p, phi tuy\u1ebfn trong d\u1eef li\u1ec7u, \u0111i\u1ec1u m\u00e0 c\u00e1c m\u00f4 h\u00ecnh \u0111\u01a1n gi\u1ea3n kh\u00f4ng l\u00e0m \u0111\u01b0\u1ee3c.</p>"},{"location":"Neural%20Network/explain_fully_connect/#3-ham-spiral_data-tao-ra-cai-gi","title":"3. H\u00e0m <code>spiral_data</code> t\u1ea1o ra c\u00e1i g\u00ec?","text":"<p>Khi b\u1ea1n g\u1ecdi <code>X, y = spiral_data(samples=100, classes=3)</code>, h\u00e0m n\u00e0y s\u1ebd t\u00ednh to\u00e1n v\u00e0 tr\u1ea3 v\u1ec1 hai th\u1ee9:</p> <ol> <li> <p><code>X</code> (C\u00e1c \u0111\u1eb7c tr\u01b0ng - The Features):</p> <ul> <li>L\u00e0 m\u1ed9t m\u1ea3ng NumPy ch\u1ee9a t\u1ecda \u0111\u1ed9 <code>[x, y]</code> c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c \u0111i\u1ec3m.</li> <li>V\u1edbi <code>samples=100</code> v\u00e0 <code>classes=3</code>, n\u00f3 s\u1ebd t\u1ea1o ra <code>100 * 3 = 300</code> \u0111i\u1ec3m.</li> <li>V\u00ec v\u1eady, <code>X</code> s\u1ebd c\u00f3 k\u00edch th\u01b0\u1edbc l\u00e0 <code>(300, 2)</code>.</li> <li>Trong c\u00e2u chuy\u1ec7n \"gi\u00e1m kh\u1ea3o hoa qu\u1ea3\" c\u1ee7a ch\u00fang ta, <code>X</code> t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi m\u1ed9t danh s\u00e1ch 300 qu\u1ea3, m\u1ed7i qu\u1ea3 c\u00f3 2 \u0111\u1eb7c \u0111i\u1ec3m l\u00e0 \"\u0110\u1ed9 \u0111\u1ecf\" v\u00e0 \"\u0110 \u0110\u1ed9 tr\u00f2n\".</li> </ul> </li> <li> <p><code>y</code> (C\u00e1c nh\u00e3n - The Labels):</p> <ul> <li>L\u00e0 m\u1ed9t m\u1ea3ng NumPy ch\u1ee9a nh\u00e3n l\u1edbp cho m\u1ed7i \u0111i\u1ec3m t\u01b0\u01a1ng \u1ee9ng trong <code>X</code>.</li> <li>N\u00f3 s\u1ebd ch\u1ee9a 300 con s\u1ed1, bao g\u1ed3m 100 s\u1ed1 <code>0</code>, 100 s\u1ed1 <code>1</code>, v\u00e0 100 s\u1ed1 <code>2</code>.</li> <li><code>y[i]</code> l\u00e0 nh\u00e3n (\u0111\u00e1p \u00e1n \u0111\u00fang) cho \u0111i\u1ec3m <code>X[i]</code>.</li> <li>Trong c\u00e2u chuy\u1ec7n c\u1ee7a ch\u00fang ta, <code>y</code> l\u00e0 danh s\u00e1ch \u0111\u00e1p \u00e1n \u0111\u00fang: qu\u1ea3 n\u00e0o l\u00e0 \"T\u00e1o\" (l\u1edbp 0), qu\u1ea3 n\u00e0o l\u00e0 \"Cam\" (l\u1edbp 1), qu\u1ea3 n\u00e0o l\u00e0 \"Chu\u1ed1i\" (l\u1edbp 2).</li> </ul> </li> </ol> <p>V\u00ec v\u1eady, <code>spiral_data</code> kh\u00f4ng ch\u1ec9 l\u00e0 m\u1ed9t b\u1ed9 d\u1eef li\u1ec7u, m\u00e0 n\u00f3 l\u00e0 m\u1ed9t b\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i phi tuy\u1ebfn kinh \u0111i\u1ec3n \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i s\u1eb5n \u0111\u1ec3 b\u1ea1n c\u00f3 th\u1ec3 nhanh ch\u00f3ng ki\u1ec3m tra m\u00f4 h\u00ecnh c\u1ee7a m\u00ecnh.</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/","title":"M\u1ed5 x\u1ebb qu\u00e1 tr\u00ecnh bi\u1ebfn \u0111\u1ed5i m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u duy nh\u1ea5t.","text":"<p>Gi\u1ea3 s\u1eed ch\u00fang ta c\u00f3: *   M\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o <code>O</code> c\u00f3 t\u1ecda \u0111\u1ed9 <code>(0.5, 1.0)</code>. *   M\u1ed9t l\u1edbp <code>Layer_Dense</code> c\u00f3 2 \u0111\u1ea7u v\u00e0o v\u00e0 3 neuron.</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#1-khoi-tao-initialization","title":"1. Kh\u1edfi T\u1ea1o (Initialization)","text":"<p>L\u1edbp <code>dense1</code> \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u1edbi <code>weights</code> v\u00e0 <code>biases</code>. Gi\u1ea3 s\u1eed sau khi kh\u1edfi t\u1ea1o ng\u1eabu nhi\u00ean, ch\u00fang ta c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb c\u1ee5 th\u1ec3 nh\u01b0 sau:</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#ma-tran-trong-so-w-selfweights-kich-thuoc-2-3","title":"Ma tr\u1eadn Tr\u1ecdng s\u1ed1 <code>W</code> (self.weights) - K\u00edch th\u01b0\u1edbc (2, 3)","text":"<ul> <li>H\u00e0ng 0: Tr\u1ecdng s\u1ed1 cho \u0111\u1ea7u v\u00e0o th\u1ee9 nh\u1ea5t (<code>i1 = 0.5</code>).</li> <li>H\u00e0ng 1: Tr\u1ecdng s\u1ed1 cho \u0111\u1ea7u v\u00e0o th\u1ee9 hai (<code>i2 = 1.0</code>).</li> <li>C\u1ed9t 0, 1, 2: T\u01b0\u01a1ng \u1ee9ng v\u1edbi Neuron 0, 1, 2.</li> </ul> <pre><code>          Neuron 0   Neuron 1   Neuron 2\n         +----------+----------+----------+\nInput 0  |   0.2    |   0.8    |  -0.5    |\n(i1=0.5) +----------+----------+----------+\nInput 1  |  -0.9    |   0.2    |   0.4    |\n(i2=1.0) +----------+----------+----------+\n</code></pre>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#vector-bias-b-selfbiases-kich-thuoc-1-3","title":"Vector Bias <code>b</code> (self.biases) - K\u00edch th\u01b0\u1edbc (1, 3)","text":"<ul> <li>M\u1ed7i gi\u00e1 tr\u1ecb t\u01b0\u01a1ng \u1ee9ng v\u1edbi thi\u00ean ki\u1ebfn c\u1ee7a m\u1ed9t neuron.</li> </ul> <pre><code>         +----------+----------+----------+\n         |   2.0    |   3.0    |   0.5    |\n         +----------+----------+----------+\n           Neuron 0   Neuron 1   Neuron 2\n</code></pre>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#2-qua-trinh-bien-oi-transformation-dense1forwardo","title":"2. Qu\u00e1 tr\u00ecnh Bi\u1ebfn \u0111\u1ed5i (Transformation) - <code>dense1.forward(O)</code>","text":"<p>Ch\u00fang ta th\u1ef1c hi\u1ec7n ph\u00e9p to\u00e1n: <code>v' = v \u00b7 W + b</code></p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#buoc-21-phep-nhan-ma-tran-dot-product-v-w","title":"B\u01b0\u1edbc 2.1: Ph\u00e9p nh\u00e2n ma tr\u1eadn (Dot Product) <code>v \u00b7 W</code>","text":"<ul> <li><code>v</code> l\u00e0 vector \u0111\u1ea7u v\u00e0o: <code>[0.5, 1.0]</code> (K\u00edch th\u01b0\u1edbc 1x2)</li> <li><code>W</code> l\u00e0 ma tr\u1eadn tr\u1ecdng s\u1ed1 (K\u00edch th\u01b0\u1edbc 2x3)</li> <li>K\u1ebft qu\u1ea3 s\u1ebd l\u00e0 m\u1ed9t vector k\u00edch th\u01b0\u1edbc 1x3.</li> </ul> <pre><code>                                       +-------+-------+-------+\n                                       |  0.2  |  0.8  | -0.5  |\n                                       | -0.9  |  0.2  |  0.4  |\n                                       +-------+-------+-------+\n                                                 ^\n                                                 |\n                                                 \u00b7 (Dot Product)\n+-------+-------+\n|  0.5  |  1.0  |\n+-------+-------+\n      |\n      +-------------------------------------------------------------+\n      |                                                             |\n      v                                                             v\n    T\u00ednh to\u00e1n cho Neuron 0:                                       T\u00ednh to\u00e1n cho Neuron 1:\n    (0.5 * 0.2) + (1.0 * -0.9)                                    (0.5 * 0.8) + (1.0 * 0.2)\n    = 0.1 - 0.9                                                   = 0.4 + 0.2\n    = -0.8                                                        = 0.6\n\n                                                                     T\u00ednh to\u00e1n cho Neuron 2:\n                                                                     (0.5 * -0.5) + (1.0 * 0.4)\n                                                                     = -0.25 + 0.4\n                                                                     = 0.15\n</code></pre> <p>K\u1ebft qu\u1ea3 c\u1ee7a ph\u00e9p nh\u00e2n ma tr\u1eadn l\u00e0 vector <code>[-0.8, 0.6, 0.15]</code>.</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#buoc-22-cong-vector-bias-b","title":"B\u01b0\u1edbc 2.2: C\u1ed9ng Vector Bias <code>+ b</code>","text":"<p>B\u00e2y gi\u1edd, ch\u00fang ta l\u1ea5y k\u1ebft qu\u1ea3 \u1edf tr\u00ean v\u00e0 c\u1ed9ng v\u1edbi vector bias.</p> <pre><code>      K\u1ebft qu\u1ea3 t\u1eeb v \u00b7 W                  Vector Bias b                Vector \u0111\u1ea7u ra v'\n+--------+-------+--------+     +     +-------+-------+-------+     =     +-------+-------+-------+\n|  -0.8  |  0.6  |  0.15  |           |  2.0  |  3.0  |  0.5  |           |  1.2  |  3.6  |  0.65 |\n+--------+-------+--------+           +-------+-------+-------+           +-------+-------+-------+\n     |        |        |                 |        |        |                 |        |        |\n     |        |        +-----------------|--------|--------|-----------------+        |\n     |        +--------------------------|--------|--------+--------------------------+\n     +-----------------------------------|--------+-----------------------------------+\n\n     -0.8 + 2.0 = 1.2\n           0.6 + 3.0 = 3.6\n                 0.15 + 0.5 = 0.65\n</code></pre> <p>K\u1ebft qu\u1ea3: Vector <code>v'</code> (\u0111\u1ea7u ra c\u1ee7a <code>dense1</code>) l\u00e0 <code>[1.2, 3.6, 0.65]</code>. \u0110\u00e2y ch\u00ednh l\u00e0 t\u1ecda \u0111\u1ed9 c\u1ee7a \u0111i\u1ec3m <code>O</code> trong kh\u00f4ng gian 3 chi\u1ec1u m\u1edbi sau ph\u00e9p bi\u1ebfn \u0111\u1ed5i tuy\u1ebfn t\u00ednh.</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#3-kich-hoat-relu-activation1forwardv","title":"3. K\u00edch Ho\u1ea1t ReLU - <code>activation1.forward(v')</code>","text":"<p>B\u00e2y gi\u1edd, ch\u00fang ta \u0111\u01b0a vector <code>v'</code> qua h\u00e0m ReLU. H\u00e0m n\u00e0y ho\u1ea1t \u0111\u1ed9ng tr\u00ean t\u1eebng ph\u1ea7n t\u1eed (element-wise).</p> <pre><code>     Vector \u0111\u1ea7u v\u00e0o v' cho ReLU           H\u00e0nh \u0111\u1ed9ng c\u1ee7a ReLU           Vector cu\u1ed1i c\u00f9ng v''\n+-------+-------+-------+        max(0, x)       +-------+-------+-------+\n|  1.2  |  3.6  |  0.65 |  ----------------&gt;     |  1.2  |  3.6  |  0.65 |\n+-------+-------+-------+                        +-------+-------+-------+\n     |        |        |\n     |        |        +-----&gt; max(0, 0.65) = 0.65\n     |        +--------------&gt; max(0, 3.6)  = 3.6\n     +-----------------------&gt; max(0, 1.2)  = 1.2\n</code></pre> <p>Trong v\u00ed d\u1ee5 n\u00e0y, v\u00ec t\u1ea5t c\u1ea3 c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a <code>v'</code> \u0111\u1ec1u l\u00e0 s\u1ed1 d\u01b0\u01a1ng, n\u00ean \u0111\u1ea7u ra c\u1ee7a ReLU <code>v''</code> gi\u1ed1ng h\u1ec7t <code>v'</code>.</p> <p>N\u1ebfu <code>v'</code> l\u00e0 <code>[-0.8, 0.6, 0.15]</code> (tr\u01b0\u1edbc khi c\u1ed9ng bias), th\u00ec k\u1ebft qu\u1ea3 s\u1ebd kh\u00e1c:</p> <pre><code>     Vector \u0111\u1ea7u v\u00e0o v' cho ReLU           H\u00e0nh \u0111\u1ed9ng c\u1ee7a ReLU           Vector cu\u1ed1i c\u00f9ng v''\n+--------+-------+--------+        max(0, x)       +-------+-------+--------+\n|  -0.8  |  0.6  |  0.15  |  ----------------&gt;     |  0.0  |  0.6  |  0.15  |\n+--------+-------+--------+                        +-------+-------+--------+\n     |        |        |\n     |        |        +-----&gt; max(0, 0.15) = 0.15\n     |        +--------------&gt; max(0, 0.6)  = 0.6\n     +-----------------------&gt; max(0, -0.8) = 0.0\n</code></pre> <p>S\u01a1 \u0111\u1ed3 n\u00e0y \u0111\u00e3 m\u00f4 t\u1ea3 to\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh to\u00e1n h\u1ecdc t\u1eeb m\u1ed9t vector \u0111\u1ea7u v\u00e0o <code>v</code> \u0111\u1ebfn vector cu\u1ed1i c\u00f9ng <code>v''</code> sau khi qua m\u1ed9t l\u1edbp d\u00e0y \u0111\u1eb7c v\u00e0 m\u1ed9t l\u1edbp k\u00edch ho\u1ea1t ReLU.</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#dien-giai-truu-tuong","title":"Di\u1ec5n gi\u1ea3i tr\u1eebu t\u01b0\u1ee3ng","text":"<p>M\u1ed7i neuron \u0111\u00f3ng g\u00f3p v\u00e0o vi\u1ec7c t\u1ea1o ra \"ch\u1eef k\u00fd\" cu\u1ed1i c\u00f9ng nh\u01b0 th\u1ebf n\u00e0o?</p>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#phan-tich","title":"Ph\u00e2n T\u00edch","text":"<ol> <li> <p>Neural 1 \u0111\u00f3ng g\u00f3p m\u1ed9t ph\u1ea7n v\u00e0o vi\u1ec7c t\u1ea1o ra ch\u1eef k\u00fd cu\u1ed1i c\u00f9ng. N\u00f3 gi\u1ed1ng nh\u01b0 m\u1ed9t nh\u1ea1c c\u00f4ng trong d\u00e0n nh\u1ea1c. Nh\u1ea1c c\u00f4ng violin kh\u00f4ng \"mang\" b\u1ea3n giao h\u01b0\u1edfng, anh ta ch\u1ec9 ch\u01a1i ph\u1ea7n violin c\u1ee7a m\u00ecnh. B\u1ea3n giao h\u01b0\u1edfng (ch\u1eef k\u00fd) l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c nh\u1ea1c c\u00f4ng. C\u00e1ch di\u1ec5n \u0111\u1ea1t ch\u00ednh x\u00e1c h\u01a1n: \"Neuron 1 c\u00f3 m\u1ed9t b\u1ed9 ti\u00eau ch\u00ed ri\u00eang (weights v\u00e0 bias c\u1ee7a n\u00f3).\"</p> </li> <li> <p>\"bi\u1ebfn \u0111\u1ed5i O(x,y) --&gt; O'(x,y,z)\": To\u00e0n b\u1ed9 l\u1edbp (g\u1ed3m c\u1ea3 3 neuron) c\u00f9ng nhau th\u1ef1c hi\u1ec7n ph\u00e9p bi\u1ebfn \u0111\u1ed5i n\u00e0y.</p> </li> </ol>"},{"location":"Neural%20Network/mathematic_explaint_ReLU/#dien-giai-lai","title":"Di\u1ec5n Gi\u1ea3i L\u1ea1i","text":"<ol> <li> <p>M\u1ed7i Neuron l\u00e0 m\u1ed9t \"M\u00e1y \u0110o \u0110\u1eb7c Tr\u01b0ng\":</p> <ul> <li>Neuron 1 \u0111\u01b0\u1ee3c trang b\u1ecb m\u1ed9t b\u1ed9 ti\u00eau ch\u00ed <code>(w1, b1)</code>. N\u00f3 \u0111o xem \u0111i\u1ec3m <code>O(x,y)</code> ph\u00f9 h\u1ee3p v\u1edbi ti\u00eau ch\u00ed n\u00e0y \u0111\u1ebfn \u0111\u00e2u v\u00e0 cho ra m\u1ed9t \u0111i\u1ec3m s\u1ed1 l\u00e0 <code>x'</code>.</li> <li>Neuron 2 \u0111\u01b0\u1ee3c trang b\u1ecb m\u1ed9t b\u1ed9 ti\u00eau ch\u00ed <code>(w2, b2)</code>. N\u00f3 \u0111o xem \u0111i\u1ec3m <code>O(x,y)</code> ph\u00f9 h\u1ee3p v\u1edbi ti\u00eau ch\u00ed n\u00e0y \u0111\u1ebfn \u0111\u00e2u v\u00e0 cho ra m\u1ed9t \u0111i\u1ec3m s\u1ed1 l\u00e0 <code>y'</code>.</li> <li>Neuron 3 \u0111\u01b0\u1ee3c trang b\u1ecb m\u1ed9t b\u1ed9 ti\u00eau ch\u00ed <code>(w3, b3)</code>. N\u00f3 \u0111o xem \u0111i\u1ec3m <code>O(x,y)</code> ph\u00f9 h\u1ee3p v\u1edbi ti\u00eau ch\u00ed n\u00e0y \u0111\u1ebfn \u0111\u00e2u v\u00e0 cho ra m\u1ed9t \u0111i\u1ec3m s\u1ed1 l\u00e0 <code>z'</code>.</li> </ul> </li> <li> <p>T\u1ea1o Ra \"Ch\u1eef K\u00fd\":</p> <ul> <li>\"Ch\u1eef k\u00fd\" c\u1ee7a \u0111i\u1ec3m <code>O</code> kh\u00f4ng ph\u1ea3i l\u00e0 do m\u1ed9t neuron t\u1ea1o ra. \"Ch\u1eef k\u00fd\" ch\u00ednh l\u00e0 vector k\u1ebft qu\u1ea3 <code>O'(x', y', z')</code>. N\u00f3 l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111i\u1ec3m s\u1ed1 m\u00e0 t\u1ea5t c\u1ea3 c\u00e1c \"m\u00e1y \u0111o\" \u0111\u00e3 \u0111\u01b0a ra.</li> </ul> </li> <li> <p>M\u1ee5c Ti\u00eau Hu\u1ea5n Luy\u1ec7n (Training):</p> <ul> <li>Qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n s\u1ebd \u0111i\u1ec1u ch\u1ec9nh c\u00e1c b\u1ed9 ti\u00eau ch\u00ed <code>(w, b)</code> c\u1ee7a t\u1eebng neuron sao cho:<ul> <li>T\u1ea5t c\u1ea3 c\u00e1c \u0111i\u1ec3m <code>O</code> thu\u1ed9c l\u1edbp \"Xanh\" khi \u0111i qua 3 \"m\u00e1y \u0111o\" n\u00e0y s\u1ebd t\u1ea1o ra c\u00e1c vector <code>O'</code> (c\u00e1c ch\u1eef k\u00fd) n\u1eb1m g\u1ea7n nhau trong m\u1ed9t v\u00f9ng kh\u00f4ng gian.</li> <li>T\u1ea5t c\u1ea3 c\u00e1c \u0111i\u1ec3m <code>O</code> thu\u1ed9c l\u1edbp \"\u0110\u1ecf\" s\u1ebd t\u1ea1o ra c\u00e1c ch\u1eef k\u00fd n\u1eb1m g\u1ea7n nhau trong m\u1ed9t v\u00f9ng kh\u00f4ng gian kh\u00e1c.</li> <li>V\u00e0 t\u01b0\u01a1ng t\u1ef1 cho l\u1edbp \"L\u00e1\".</li> </ul> </li> </ul> </li> </ol> <p>S\u01a1 \u0110\u1ed3 ASCII C\u1eadp Nh\u1eadt \u0111\u1ec3 Ph\u1ea3n \u00c1nh \u00dd T\u01b0\u1edfng N\u00e0y</p> <pre><code>  \u0110i\u1ec3m \u0110\u1ea7u V\u00e0o O(x,y)\n          |\n          |\n+---------+---------+\n|                   |\nv                   v\nM\u00e1y \u0110o 1            M\u00e1y \u0110o 2            M\u00e1y \u0110o 3\n(Ti\u00eau ch\u00ed w1, b1)   (Ti\u00eau ch\u00ed w2, b2)   (Ti\u00eau ch\u00ed w3, b3)\n|                   |                   |\nv                   v                   v\n\u0110i\u1ec3m s\u1ed1 x'          \u0110i\u1ec3m s\u1ed1 y'          \u0110i\u1ec3m s\u1ed1 z'\n|                   |                   |\n+---------+---------+-------------------+\n          |\n          v\n\"Ch\u1eef K\u00fd\" = O'(x', y', z')\n(Vector k\u1ebft qu\u1ea3 trong kh\u00f4ng gian m\u1edbi)\n</code></pre> <p>V\u00ed d\u1ee5: Sau khi hu\u1ea5n luy\u1ec7n, c\u00f3 th\u1ec3 x\u1ea3y ra tr\u01b0\u1eddng h\u1ee3p: *   Ti\u00eau ch\u00ed 1 (c\u1ee7a Neuron 1) tr\u1edf th\u00e0nh \"ph\u00e1t hi\u1ec7n \u0111\u01b0\u1eddng cong h\u01b0\u1edbng l\u00ean\". *   Ti\u00eau ch\u00ed 2 (c\u1ee7a Neuron 2) tr\u1edf th\u00e0nh \"ph\u00e1t hi\u1ec7n v\u1ecb tr\u00ed g\u1ea7n g\u1ed1c t\u1ecda \u0111\u1ed9\". *   M\u1ed9t \u0111i\u1ec3m <code>O</code> thu\u1ed9c l\u1edbp \"Xanh\" c\u00f3 th\u1ec3 v\u1eeba cong l\u00ean, v\u1eeba g\u1ea7n g\u1ed1c t\u1ecda \u0111\u1ed9. Ch\u1eef k\u00fd c\u1ee7a n\u00f3 s\u1ebd l\u00e0 <code>O'(CAO, CAO, ...)</code>. *   M\u1ed9t \u0111i\u1ec3m <code>O</code> thu\u1ed9c l\u1edbp \"\u0110\u1ecf\" c\u00f3 th\u1ec3 cong l\u00ean nh\u01b0ng xa g\u1ed1c t\u1ecda \u0111\u1ed9. Ch\u1eef k\u00fd c\u1ee7a n\u00f3 s\u1ebd l\u00e0 <code>O'(CAO, TH\u1ea4P, ...)</code>.</p> <p>K\u1ebft lu\u1eadn: M\u1ed7i neuron c\u00f3 m\u1ed9t vai tr\u00f2 ri\u00eang. Vai tr\u00f2 \u0111\u00f3 l\u00e0 \"\u0111o l\u01b0\u1eddng m\u1ed9t \u0111\u1eb7c tr\u01b0ng\". \"Ch\u1eef k\u00fd\" cu\u1ed1i c\u00f9ng c\u1ee7a m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u l\u00e0 t\u1ed5 h\u1ee3p k\u1ebft qu\u1ea3 t\u1eeb t\u1ea5t c\u1ea3 c\u00e1c ph\u00e9p \u0111o \u0111\u1eb7c tr\u01b0ng \u0111\u00f3.</p>"}]}